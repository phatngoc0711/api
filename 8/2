Imports System.ServiceProcess
Imports System.Threading
Imports Newtonsoft.Json
Imports NLog
Imports TEC.SRA
Public Class webapi

    Public Property webpos_shop_cd As String
    Public Property webpos_pos_no As String
    Public Property t As String
    Public Property h As String
End Class
Public Class objects

    Public Property tag_name As String
    Public Property values As String()
End Class
Public Class methods

    Public Property method_name As String
    Public Property objects As objects()
End Class
Public Class data

    Public Property webapi As webapi
    Public Property methods As methods()
End Class
'Class Result success
Public Class success

    Public Property rc As String
End Class
'Class Result fail
Public Class fail

    Public Property rc As String
    Public Property method As String
    Public Property discription As String
End Class
Public Class Main
    Implements System.Web.IHttpHandler

    Private methodError As String
    Private methodErrorMessage As String
    Private methodErrorCode As String
    Private errorMessage As String
    Private jsonResult As String
    Private retry As Integer = System.Configuration.ConfigurationManager.AppSettings("MaxTry").ToString()
    Private retryindex As Integer = 0
    Private Logger As NLog.Logger = NLog.LogManager.GetLogger("fileLogger")
    Private shopCode As String
    Private posNo As String
    Dim t As String
    Dim h As String
    Private passWord As String = System.Configuration.ConfigurationManager.AppSettings("Password").ToString()
    Private rc As String
    Private sessionID As String
    Dim myProcess As New Process
    Public gv_oSR As New SmtRctAccessLib.SmtRctAccess
    Function getsuccess(ByVal rc As String) As success

        Dim sc As New success
        sc.rc = rc
        Return sc
    End Function
    Function getfail(ByVal rc As String, ByVal method As String, ByVal discription As String) As fail

        Dim fl As New fail
        fl.rc = rc
        fl.method = method
        fl.discription = discription
        Return fl
    End Function
    Function getJsonSuccess(ByVal sc As success) As String

        Dim json As String
        json = JsonConvert.SerializeObject(sc)
        Return json
    End Function
    Function getJsonFail(ByVal fl As fail) As String

        Dim json As String
        json = JsonConvert.SerializeObject(fl)
        Return json
    End Function
    Private Function GetHash(strToHash As String) As String

        Dim md5Obj As New System.Security.Cryptography.MD5CryptoServiceProvider
        Dim bytesToHash() As Byte = System.Text.Encoding.ASCII.GetBytes(strToHash)
        bytesToHash = md5Obj.ComputeHash(bytesToHash)
        Dim strResult As New StringBuilder
        For Each b As Byte In bytesToHash
            strResult.Append(b.ToString("x2"))
        Next
        Return strResult.ToString
    End Function
    Function delete0(ByVal key As String) As String

        Dim result As String = ""
        For i As Integer = 0 To key.Length - 1 Step +1
            If key(i) <> "0" Then
                For j As Integer = i To key.Length - 1 Step +1
                    result = result + key(j)
                Next j
                Exit For
            End If
        Next i
        Return result
    End Function
    Function checkInitHash() As Boolean

        Dim convert As String = ""
        convert = passWord
        Dim hash As String
        hash = GetHash(convert)
        If h.Equals(delete0(posNo) + delete0(t) + hash) Then
            Return True
        End If
        Return False
    End Function
    Function checkJson() As Boolean

        If checkNullAndEmpty(shopCode) And checkNullAndEmpty(posNo) And checkNullAndEmpty(t) And checkNullAndEmpty(h) Then
            Return True
        End If
        Return False
    End Function
    Function checkNullAndEmpty(ByVal key As String) As Boolean

        If key Is Nothing Or key = "" Then
            Return False
        End If
        Return True
    End Function
    Function checkService() As Boolean

        For Each s As ServiceController In ServiceController.GetServices()
            If s.ServiceName = "CrossMission SmartReceipt Agent" AndAlso s.Status = ServiceControllerStatus.Running Then
                Return True
            End If
        Next
        Return False
    End Function
    Sub ProcessRequest(ByVal context As HttpContext) Implements IHttpHandler.ProcessRequest

        If Not checkService() Then
            Dim temp As String
            temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_WINDOWS_SERVICE_CHECK_FAIL
            Dim temp1 As String()
            temp1 = temp.Split("@")
            rc = temp1(0)
            methodErrorMessage = temp1(1)
            jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
            context.Response.Write(jsonResult + Environment.NewLine)
            Return
        End If
        Dim strJson As String
        strJson = context.Request.Form("json").ToString
        context.Response.ContentType = "text/plain"
        'Check Deserialize
        Dim api As New data
        Try
            api = JsonConvert.DeserializeObject(Of data)(strJson.ToString)
        Catch
            Dim temp As String
            temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_DESERIALIZE_FAIL
            Dim temp1 As String()
            temp1 = temp.Split("@")
            rc = temp1(0)
            methodErrorMessage = temp1(1)
            jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
            context.Response.Write(jsonResult + Environment.NewLine)
            Return
        End Try
        '
        'Json Handle
        'Get Value
        shopCode = api.webapi.webpos_shop_cd
        posNo = api.webapi.webpos_pos_no
        t = api.webapi.t
        h = api.webapi.h
        'Check Json Null Or Empty
        If Not checkJson() Then
            Dim temp As String
            temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_CHECK_JSON
            Dim temp1 As String()
            temp1 = temp.Split("@")
            rc = temp1(0)
            methodErrorMessage = temp1(1)
            jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
            context.Response.Write(jsonResult + Environment.NewLine)
            Return
        End If
        'Check Authen by compare h with posNo + t + Hash(passWord)
        If Not checkInitHash() Then
            Dim temp As String
            temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_AUTHEN_FAIL
            Dim temp1 As String()
            temp1 = temp.Split("@")
            rc = temp1(0)
            methodErrorMessage = temp1(1)
            jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
            context.Response.Write(jsonResult + Environment.NewLine)
            Return
        End If
        'Check Method
        For i As Integer = 0 To api.methods.Length - 1 Step +1
            If api.methods(i).method_name = "GetConfigValue" Then
                Dim flag As Integer = 0
                'value: gv_oSR.GetConfigValue(api.methods(i).objects(0).tag_name)
                Try
                    For j As Integer = 0 To api.methods(i).objects.Length - 1 Step +1
                        context.Response.Write(gv_oSR.GetConfigValue(api.methods(i).objects(j).tag_name) + Environment.NewLine)
                        context.Response.Write(api.methods(i).objects(j).tag_name + Environment.NewLine)
                        If gv_oSR.GetConfigValue(api.methods(i).objects(j).tag_name) Is Nothing Then
                            flag = 1
                        End If
                    Next j
                Catch
                    Dim temp As String
                    temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_CHECK_JSON
                    Dim temp1 As String()
                    temp1 = temp.Split("@")
                    rc = temp1(0)
                    methodErrorMessage = temp1(1)
                    jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
                    context.Response.Write(jsonResult + Environment.NewLine)
                    Return
                End Try
                If flag = 1 Then
                    methodError = "GetConfigValue"
                    methodErrorMessage = "Not Found Config Value"
                    Exit For
                End If
            End If
            If api.methods(i).method_name = "SetConfigValue" Then
                Dim flag As Integer = 0
                Try
                    For j As Integer = 0 To api.methods(i).objects.Length - 1 Step +1
                        context.Response.Write(gv_oSR.SetConfigValue(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values)).ToString + Environment.NewLine)
                        If gv_oSR.SetConfigValue(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values)) = False Then
                            flag = 1
                        End If
                    Next j
                Catch
                    Dim temp As String
                    temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_CHECK_JSON
                    Dim temp1 As String()
                    temp1 = temp.Split("@")
                    rc = temp1(0)
                    methodErrorMessage = temp1(1)
                    jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
                    context.Response.Write(jsonResult + Environment.NewLine)
                    Return
                End Try
                If flag = 1 Then
                    methodError = "SetConfigValue"
                    methodErrorMessage = "Fail To Set Config Value"
                    Exit For
                End If
            End If
            If api.methods(i).method_name = "ApplyConfig" Then
                'value boolean: gv_oSR.ApplyConfig() 
                context.Response.Write(gv_oSR.ApplyConfig().ToString + Environment.NewLine)
                If gv_oSR.ApplyConfig() = False Then
                    methodError = "ApplyConfig"
                    methodErrorMessage = "Fail To Apply Config"
                    Exit For
                End If
            End If
            If api.methods(i).method_name = "InitReceipt" Then
                'value gv_oSR.InitReceipt()         
                context.Response.Write(gv_oSR.InitReceipt.ToString + Environment.NewLine)
                context.Response.Write("InitReceipt" + Environment.NewLine)
                If gv_oSR.InitReceipt() <> 0 Then
                    methodError = "InitReceipt"
                    methodErrorCode = gv_oSR.InitReceipt()
                    Exit For
                End If
            End If
            If api.methods(i).method_name = "SetReceiptData" Then
                Dim flag As Integer = 0
                Try
                    For j As Integer = 0 To api.methods(i).objects.Length - 1 Step +1
                        'gv_oSR.SetReceiptData(api.methods(i).objects(j))
                        context.Response.Write(api.methods(i).objects(j).tag_name + Environment.NewLine)
                        context.Response.Write(getValueInHeaderAndFooter(api.methods(i).objects(j).values) + Environment.NewLine)
                        'value gv_oSR.SetReceiptData(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values))
                        context.Response.Write(gv_oSR.SetReceiptData(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values)).ToString + Environment.NewLine)
                        If gv_oSR.SetReceiptData(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values)) <> 0 Then
                            flag = 1
                            methodErrorCode = gv_oSR.SetReceiptData(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values))
                        End If
                    Next j
                Catch
                    Dim temp As String
                    temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_CHECK_JSON
                    Dim temp1 As String()
                    temp1 = temp.Split("@")
                    rc = temp1(0)
                    methodErrorMessage = temp1(1)
                    jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
                    context.Response.Write(jsonResult + Environment.NewLine)
                    Return
                End Try

                If flag = 1 Then
                    methodError = "SetReceiptData"
                    Exit For
                End If
            End If
            If api.methods(i).method_name = "AddReceiptDataToList" Then
                'value gv_oSR.AddReceiptDataToList(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values))
                Dim flag As Integer = 0
                Try
                    For j As Integer = 0 To api.methods(i).objects.Length - 1 Step +1
                        context.Response.Write(api.methods(i).objects(j).tag_name + Environment.NewLine)
                        context.Response.Write(getValueInHeaderAndFooter(api.methods(i).objects(j).values) + Environment.NewLine)
                        context.Response.Write(gv_oSR.AddReceiptDataToList(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values)).ToString + Environment.NewLine)
                        If gv_oSR.AddReceiptDataToList(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values)) <> 0 Then
                            flag = 1
                            methodErrorCode = gv_oSR.AddReceiptDataToList(api.methods(i).objects(j).tag_name, getValueInHeaderAndFooter(api.methods(i).objects(j).values))
                        End If
                    Next j
                Catch
                    Dim temp As String
                    temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_CHECK_JSON
                    Dim temp1 As String()
                    temp1 = temp.Split("@")
                    rc = temp1(0)
                    methodErrorMessage = temp1(1)
                    jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
                    context.Response.Write(jsonResult + Environment.NewLine)
                    Return
                End Try
                If flag = 1 Then
                    methodError = "AddReceiptDataToList"
                    Exit For
                End If
            End If
        Next i
        'Get sessionID in log 
        Dim processID As String
        processID = Process.GetCurrentProcess().Id.ToString
        Dim millis = System.DateTime.Now.Millisecond
        Dim MyValue As Integer
        Dim rnd As New Random
        MyValue = rnd.Next(1000)
        sessionID = shopCode + "_" + posNo + "_" + processID + "_" + millis.ToString.ToString + "_" + MyValue.ToString
        '
        Dim mutexName As String = "SmartReceipt"
        Dim mutex As New System.Threading.Mutex(False, mutexName)
        Dim hasHandle As Boolean = False
        Try
            Try
                hasHandle = mutex.WaitOne(0, False)
                Logger.Info($"" + "(" + sessionID + ")" + vbTab + "----------------------------------------------------")
                Logger.Info($"" + "(" + sessionID + ")" + vbTab + "MainService.ashx	start" + vbTab + "（shopCD:" + shopCode + "、PosNo：" + posNo + ")")
            Catch ex As System.Threading.AbandonedMutexException
                hasHandle = True
            End Try
            If hasHandle = False Then
                retryindex = 1
                For i As Integer = 1 To retry - 1 Step +1
                    Logger.Info($"" + "(" + sessionID + ")" + vbTab + "MainService.ashx	wait" + vbTab + "（shopCD:" + shopCode + "、PosNo：" + posNo + ")")
                    Thread.Sleep(1000)
                    Try
                        hasHandle = mutex.WaitOne(0, False)
                    Catch ex As System.Threading.AbandonedMutexException
                        hasHandle = True
                    End Try
                    If hasHandle = True Then
                        If methodError Is Nothing Then
                            context.Response.Write(getJsonSuccess(getsuccess("1")) + Environment.NewLine)
                        Else
                            If Not methodErrorCode Is Nothing Then
                                getSRAErrorMessage(methodErrorCode)
                            End If
                            jsonResult = getJsonFail(getfail("-2", methodError, methodErrorMessage))
                        End If
                        context.Response.Write(jsonResult + Environment.NewLine)
                        Return
                    End If
                    If hasHandle = False Then
                        If i = retry - 1 Then
                            Dim temp As String
                            temp = Global.SmartReceipt.Resources.ErrorMessage.ERR_RETRY_FAIL
                            Dim temp1 As String()
                            temp1 = temp.Split("@")
                            rc = temp1(0)
                            methodErrorMessage = temp1(1)
                            jsonResult = getJsonFail(getfail(rc, "", methodErrorMessage))
                            context.Response.Write(jsonResult + Environment.NewLine)
                            Logger.Info($"" + "(" + sessionID + ")" + vbTab + "MainService.ashx	end" + vbTab + "（shopCD:" + shopCode + "、PosNo：" + posNo + ")")
                            Logger.Info($"" + "(" + sessionID + ")" + vbTab + "----------------------------------------------------")
                            Return
                        End If
                    End If
                Next
            End If
            If retryindex = 0 Then
                If methodError Is Nothing Then
                    jsonResult = getJsonSuccess(getsuccess("0"))
                Else
                    If Not methodErrorCode Is Nothing Then
                        getSRAErrorMessage(methodErrorCode)
                    End If
                    jsonResult = getJsonFail(getfail("-1", methodError, methodErrorMessage))
                End If
                context.Response.Write(jsonResult + Environment.NewLine)
            End If
        Finally
            If hasHandle Then
                'Thread.Sleep(10000)
                Logger.Info($"" + "(" + sessionID + ")" + vbTab + "MainService.ashx	end" + vbTab + "（shopCD:" + shopCode + "、PosNo：" + posNo + ")")
                Logger.Info($"" + "(" + sessionID + ")" + vbTab + "----------------------------------------------------")
                mutex.ReleaseMutex()
            End If
            mutex.Close()
        End Try
    End Sub
    Sub getSRAErrorMessage(ByVal key As String)

        Dim result As String
        result = ""
        If key = 1000 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._1000
        ElseIf key = 101 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._101
        ElseIf key = 102 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._102
        ElseIf key = 103 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._103
        ElseIf key = 104 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._104
        ElseIf key = 200 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._200
        ElseIf key = 201 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._201
        ElseIf key = 202 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._202
        ElseIf key = 203 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._203
        ElseIf key = 204 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._204
        ElseIf key = 205 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._205
        ElseIf key = 999 Then
            result = Global.SmartReceipt.Resources.SRA_ErrorMessage._999
        End If
        methodErrorMessage = key + " " + result
    End Sub
    Private Function getValueInHeaderAndFooter(ByVal listValue As String()) As String

        Dim result As String
        result = ""
        If listValue.Length > 1 Then
            For i As Integer = 0 To listValue.Length - 1 Step +1
                If i = listValue.Length - 1 Then
                    result = result + listValue(i)
                    Exit For
                Else
                    result = result + listValue(i) + "\n" + vbCr
                End If
            Next i
        Else
            result = listValue(0)
        End If
        Return result
    End Function
    ReadOnly Property IsReusable() As Boolean Implements IHttpHandler.IsReusable

        Get
            Return False
        End Get
    End Property
End Class
