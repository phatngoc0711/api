Imports System.Threading
Imports System.Web
Imports System.Web.Script.Serialization
Imports System.Web.Services
Imports log4net
Imports Newtonsoft.Json
Imports NLog
Imports TEC.SRA

Public Class webapi
    Public Property webpos_shop_cd As String
    Public Property webpos_pos_no As String
    Public Property t As String
    Public Property h As String
End Class
Public Class objects
    Public Property tag_name As String
    Public Property values As String()
End Class
Public Class methods
    Public Property method_name As String
    Public Property objects As objects()
End Class
Public Class data
    Public Property webapi As webapi
    Public Property methods As methods()
End Class
Public Class Main
    Implements System.Web.IHttpHandler
    Private result As String = ""
    Private Const success As String = "Success"
    Private Const retrySuccess As String = "RetrySuccess"
    Private Const retryFail As String = "RetryFail"
    Private retry As Integer = System.Configuration.ConfigurationManager.AppSettings("MaxTry").ToString()
    Private retryindex As Integer = 0
    Private Logger As NLog.Logger = NLog.LogManager.GetLogger("fileLogger")
    Private shopCode As String = "516"
    Private posNo As String = "01"
    Public gv_oSR As New SmtRctAccessLib.SmtRctAccess
    Sub ProcessRequest(ByVal context As HttpContext) Implements IHttpHandler.ProcessRequest
        Dim strJson As String = ""
        strJson = context.Request.Form("json").ToString

        context.Response.ContentType = "text/plain"
        Dim mutexName As String = "SmartReceipt"
        Dim mutex As New System.Threading.Mutex(False, mutexName)
        Dim hasHandle As Boolean = False
        Try
            Try
                hasHandle = mutex.WaitOne(0, False)
                Logger.Info($"----------------------------------------------------")
                Logger.Info($"MainService.ashx	start（shopCD:xxxxx、PosNo：xx")
            Catch ex As System.Threading.AbandonedMutexException
                hasHandle = True
            End Try

            If hasHandle = False Then
                retryindex = 1
                For i As Integer = 1 To retry - 1 Step +1
                    Logger.Info($"MainService.ashx	wait（shopCD:xxxxx、PosNo：xx")
                    Thread.Sleep(1000)
                    Try
                        hasHandle = mutex.WaitOne(0, False)
                    Catch ex As System.Threading.AbandonedMutexException
                        hasHandle = True
                    End Try
                    If hasHandle = True Then
                        result = retrySuccess
                        context.Response.Write(result + Environment.NewLine)
                        context.Response.Write(strJson + "retry")
                        Return
                    End If
                    If hasHandle = False Then
                        If i = retry - 1 Then
                            result = retryFail
                            context.Response.Write(result + Environment.NewLine)
                            context.Response.Write(strJson + "fail")
                            Logger.Info($"MainService.ashx	end（shopCD:xxxxx、PosNo：xx")
                            Logger.Info($"----------------------------------------------------")
                            Return
                        End If
                    End If
                Next
            End If
            If retryindex = 0 Then
                result = success
            End If
        Finally
            If hasHandle Then
                Thread.Sleep(2000)
                Logger.Info($"MainService.ashx	end（shopCD:xxxxx、PosNo：xx")
                Logger.Info($"----------------------------------------------------")
                mutex.ReleaseMutex()
            End If
            mutex.Close()
        End Try
        context.Response.Write(result + Environment.NewLine)
        'context.Response.Write(strJson)
        Dim api As New data
        api = JsonConvert.DeserializeObject(Of data)(strJson)
        'api = New JavaScriptSerializer().Deserialize(Of data)(strJson)
        context.Response.Write(api.webapi.webpos_shop_cd + Environment.NewLine)
        context.Response.Write(api.webapi.webpos_pos_no + Environment.NewLine)
        context.Response.Write(api.webapi.t + Environment.NewLine)
        context.Response.Write(api.webapi.h + Environment.NewLine)
        context.Response.Write(api.methods(1).objects(0).values(0) + Environment.NewLine)
        context.Response.Write(api.methods(1).objects(0).values(1) + Environment.NewLine)
        context.Response.Write(api.methods(2).objects(1).values(0) + Environment.NewLine)
        'Logger.Error($"")
        'Logger.Warn("")
        'Logger.Info($"")
        'Logger.Debug($"")
        context.Response.Write(retry)
    End Sub
    Function getWebapi() As webapi
        Dim test As New webapi
        Return test
    End Function
    ReadOnly Property IsReusable() As Boolean Implements IHttpHandler.IsReusable
        Get
            Return False
        End Get
    End Property
End Class
